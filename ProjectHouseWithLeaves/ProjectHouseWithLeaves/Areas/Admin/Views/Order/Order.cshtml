@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model IEnumerable<ProjectHouseWithLeaves.Models.Order>

@{
    ViewData["Title"] = "Quản lý đơn hàng";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .table > :not(caption) > * > * {
        background-color: transparent;
    }
    .table thead th {
        color: #000;
        font-weight: 600;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
    }
    .table thead th:hover {
        background-color: #e8f5e8 !important;
    }
    .table thead th i {
        margin-left: 5px;
        opacity: 0.3;
        transition: all 0.2s ease;
    }
    .table thead th:hover i {
        opacity: 0.7;
    }
    .table thead th.active {
        background-color: #198754 !important;
        color: white !important;
        box-shadow: inset 0 0 0 2px rgba(255,255,255,0.3);
    }
    .table thead th.active i {
        opacity: 1;
        color: white;
    }
    .table thead th.active.asc i {
        transform: rotate(180deg);
    }
    .table thead th.active.desc i {
        transform: rotate(0deg);
    }
    .search-box {
        position: relative;
    }
    .search-box i {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
    .search-box input {
        padding-left: 30px;
    }
    .order-row {
        transition: all 0.3s ease;
    }
    .order-row.hidden {
        display: none;
    }
    .pagination {
        margin-bottom: 0;
    }
    .pagination .page-link {
        color: #198754;
        cursor: pointer;
    }
    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        cursor: not-allowed;
    }
    #itemsPerPage {
        width: auto;
        display: inline-block;
    }
    .bg-success {
        background-color: #28a745 !important;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .table-success {
        background-color: #d4edda;
    }
    .card {
        border-color: #28a745;
    }
    .card-header {
        background-color: #28a745;
        color: white;
    }
    .status-badge {
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
        border-radius: 0.25rem;
    }
    .status-pending {
        background-color: #ffc107;
        color: #000;
    }
    .status-accepted {
        background-color: #28a745;
        color: #fff;
    }
    .status-rejected {
        background-color: #dc3545;
        color: #fff;
    }
    .form-label {
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }
    .btn-outline-secondary:hover {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }
    .text-muted {
        color: #6c757d !important;
    }
    .py-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important;
    }
    .table thead th.sortable {
        position: relative;
        cursor: pointer;
    }
    .table thead th.sortable:hover {
        background-color: #e8f5e8 !important;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .table thead th.sortable:active {
        transform: translateY(0);
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    .product-image-container {
        position: relative;
        display: inline-block;
    }
    .product-image-container img {
        transition: all 0.3s ease;
    }
    .product-image-container:hover img {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .expand-icon {
        transition: all 0.3s ease;
    }
    .product-image-container:hover .expand-icon {
        background-color: #0056b3 !important;
        transform: translate(25%, -25%) scale(1.1);
    }
    .modal-body img {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    .badge {
        font-size: 0.875rem !important;
        padding: 0.5em 0.75em !important;
    }
    .btn-group .btn {
        margin-right: 2px;
        transition: all 0.2s ease;
    }
    .btn-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }
    .btn-group .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }
    .btn-group .btn:disabled:hover {
        transform: none;
        box-shadow: none;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover:not(:disabled) {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-danger:hover:not(:disabled) {
        background-color: #c82333;
        border-color: #bd2130;
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
        border-color: #0056b3;
    }
    .order-row.updated {
        background-color: #d4edda !important;
        transition: all 0.5s ease;
    }
    .status-badge {
        transition: all 0.3s ease;
    }
    .status-badge.status-accepted {
        background-color: #28a745 !important;
        color: #fff !important;
    }
    .status-badge.status-rejected {
        background-color: #dc3545 !important;
        color: #fff !important;
    }
    .status-badge.status-pending {
        background-color: #ffc107 !important;
        color: #000 !important;
    }
    .form-control.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }
    .form-control.is-invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }
</style>

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-success">
        <i class="fas fa-shopping-cart me-2"></i>Quản lý đơn hàng
    </h2>
   
</div>

<!-- Debug Panel -->
<div class="card mb-4" id="debugPanel" style="display: none;">
    <div class="card-header bg-info text-white">
        <h6 class="mb-0">
            <i class="fas fa-bug me-2"></i>Debug Information
        </h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <h6>Trạng thái đơn hàng:</h6>
                <div id="debugStatusInfo"></div>
            </div>
            <div class="col-md-6">
                <h6>Thống kê:</h6>
                <div id="debugStats"></div>
            </div>
        </div>
    </div>
</div>

<!-- Thanh tìm kiếm và lọc -->
<div class="card mb-4">
    <div class="card-header bg-success text-white">
        <h6 class="mb-0">
            <i class="fas fa-filter me-2"></i>Bộ lọc và tìm kiếm
        </h6>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label fw-bold">
                    <i class="fas fa-search me-1"></i>Tìm kiếm
                </label>
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm theo mã đơn hàng, email...">
                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-bold">
                    <i class="fas fa-toggle-on me-1"></i>Trạng thái
                </label>
                <select class="form-select" id="statusFilter">
                    <option value="">Tất cả trạng thái</option>
                    <option value="pending">Chờ xử lý</option>
                    <option value="accepted">Đã chấp nhận</option>
                    <option value="rejected">Đã từ chối</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-bold">
                    <i class="fas fa-calendar me-1"></i>Khoảng ngày
                </label>
                <div class="row g-2">
                    <div class="col-6">
                        <input type="date" class="form-control" id="dateFromFilter" 
                               placeholder="Từ ngày" title="Chọn ngày bắt đầu khoảng thời gian">
                    </div>
                    <div class="col-6">
                        <input type="date" class="form-control" id="dateToFilter" 
                               placeholder="Đến ngày" title="Chọn ngày kết thúc khoảng thời gian">
                    </div>
                </div>
                <div class="mt-2">
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="setDateRange('today')" title="Hôm nay">
                            Hôm nay
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="setDateRange('yesterday')" title="Hôm qua">
                            Hôm qua
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="setDateRange('week')" title="7 ngày qua">
                            7 ngày
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="setDateRange('month')" title="30 ngày qua">
                            30 ngày
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="button" class="btn btn-outline-secondary" id="resetFilters">
                    <i class="fas fa-undo me-1"></i>Đặt lại
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bảng đơn hàng -->
<div class="card">
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-success">
                <tr>
                    <th class="sortable" data-sort="orderId" style="width: 100px" title="Click để sắp xếp theo mã đơn hàng">
                        Mã đơn hàng <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="customerName" style="width: 150px" title="Click để sắp xếp theo tên khách hàng">
                        Khách hàng <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="orderDate" style="width: 120px" title="Click để sắp xếp theo ngày đặt">
                        Ngày đặt <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="totalAmount" class="text-end" style="width: 120px" title="Click để sắp xếp theo tổng tiền">
                        Tổng tiền <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="status" style="width: 120px" title="Click để sắp xếp theo trạng thái">
                        Trạng thái <i class="fas fa-sort"></i>
                    </th>
                    <th style="width: 200px">Địa chỉ giao hàng</th>
                    <th style="width: 120px">Thao tác</th>
                </tr>
            </thead>
            <tbody id="orderTableBody">
                @foreach (var order in Model)
                {
                    <tr class="order-row"
                        data-orderid="@order.OrderId"
                        data-customername="@(order.User?.Email?.ToLower() ?? "")"
                        data-orderdate="@order.OrderDate?.ToString("yyyy-MM-dd")"
                        data-totalamount="@order.TotalAmount"
                        data-status="@(order.Status?.ToLower() ?? "pending")">
                        <td>
                            <strong>#@order.OrderId</strong>
                        </td>
                        <td>
                            <div>@order.User?.Email</div>
                            <small class="text-muted">@order.User?.Phone</small>
                        </td>
                        <td>@order.OrderDate?.ToString("dd/MM/yyyy")</td>
                        <td class="text-end">
                            <strong>@order.TotalAmount?.ToString("N0") VNĐ</strong>
                        </td>
                        <td>
                            <span class="status-badge status-@(order.Status?.ToLower() ?? "pending")">
                                @(order.Status?.ToLower() == "pending" ? "Chờ xử lý" :
                                  order.Status?.ToLower() == "accepted" ? "Đã chấp nhận" :
                                  order.Status?.ToLower() == "rejected" ? "Đã từ chối" : "Chờ xử lý")
                            </span>
                        </td>
                        <td>
                            <div class="text-truncate" style="max-width: 180px;" title="@order.ShippingAddress">
                                @order.ShippingAddress
                            </div>
                            <small class="text-muted">
                                @order.Ward, @order.District, @order.City
                            </small>
                        </td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-primary"
                                        onclick="viewOrder(@order.OrderId)"
                                        data-bs-toggle="modal"
                                        data-bs-target="#viewOrderModal"
                                        title="Xem chi tiết">
                                    <i class="fas fa-eye"></i>
                                </button>
                                @{
                                    var orderStatus = order.Status?.ToLower() ?? "pending";
                                    var isPending = orderStatus == "pending";
                                    var isAccepted = orderStatus == "accepted";
                                    var isRejected = orderStatus == "rejected";
                                }
                                
                                @if (isPending)
                                {
                                    <button type="button" class="btn btn-sm btn-success"
                                            onclick="updateOrderStatus(@order.OrderId, 'accepted')"
                                            title="Chấp nhận đơn hàng">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger"
                                            onclick="updateOrderStatus(@order.OrderId, 'rejected')"
                                            title="Từ chối đơn hàng">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                                else if (isAccepted)
                                {
                                    <button type="button" class="btn btn-sm btn-success" disabled
                                            title="Đã chấp nhận">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-secondary" disabled
                                            title="Không thể từ chối đơn đã chấp nhận">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                                else if (isRejected)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled
                                            title="Không thể chấp nhận đơn đã từ chối">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger" disabled
                                            title="Đã từ chối">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                                else
                                {
                                    <!-- Trạng thái không xác định - hiển thị nút cho Pending -->
                                    <button type="button" class="btn btn-sm btn-success"
                                            onclick="updateOrderStatus(@order.OrderId, 'accepted')"
                                            title="Chấp nhận đơn hàng">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger"
                                            onclick="updateOrderStatus(@order.OrderId, 'rejected')"
                                            title="Từ chối đơn hàng">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-between align-items-center p-3">
            <div class="d-flex align-items-center">
                <span class="me-2">Hiển thị</span>
                <select class="form-select form-select-sm" id="itemsPerPage">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
                <span class="ms-2">dòng mỗi trang</span>
            </div>
            <nav>
                <ul class="pagination" id="pagination">
                    <!-- Phân trang sẽ được thêm bằng JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- View Order Modal -->
<div class="modal fade" id="viewOrderModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Chi tiết đơn hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="fw-bold">Thông tin khách hàng</h6>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Email</label>
                            <p id="viewCustomerEmail" class="mb-0"></p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Số điện thoại</label>
                            <p id="viewCustomerPhone" class="mb-0"></p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Địa chỉ giao hàng</label>
                            <p id="viewShippingAddress" class="mb-0"></p>
                            <p id="viewFullAddress" class="mb-0 text-muted small"></p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6 class="fw-bold">Thông tin đơn hàng</h6>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Mã đơn hàng</label>
                            <p id="viewOrderId" class="mb-0"></p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Ngày đặt</label>
                            <p id="viewOrderDate" class="mb-0"></p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Trạng thái</label>
                            <p id="viewOrderStatus" class="mb-0"></p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Phương thức thanh toán</label>
                            <p id="viewPaymentMethod" class="mb-0"></p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Phương thức vận chuyển</label>
                            <p id="viewShippingMethod" class="mb-0"></p>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-12">
                        <h6 class="fw-bold">Chi tiết sản phẩm</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 80px">Ảnh</th>
                                        <th>Sản phẩm</th>
                                        <th class="text-center">Số lượng</th>
                                        <th class="text-end">Đơn giá</th>
                                        <th class="text-end">Thành tiền</th>
                                    </tr>
                                </thead>
                                <tbody id="viewOrderDetails">
                                    <!-- Chi tiết sản phẩm sẽ được thêm bằng JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-md-6 offset-md-6">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tổng tiền hàng:</span>
                            <span id="viewSubtotal"></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Giảm giá:</span>
                            <span id="viewDiscount"></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Phí vận chuyển:</span>
                            <span id="viewShippingCost"></span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between fw-bold">
                            <span>Tổng cộng:</span>
                            <span id="viewTotal"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Đóng
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Khởi tạo biến
            let currentSort = {
                column: 'orderDate',
                direction: 'desc'
            };
            let currentPage = 1;
            let itemsPerPage = 10;

            // Hàm sắp xếp bảng
            function sortTable(column) {
                const $table = $('.table');
                const $header = $table.find(`th[data-sort="${column}"]`);
                const $visibleRows = $('.order-row:not(.hidden)').get();

                // Xóa active class từ tất cả headers
                $table.find('th').removeClass('active asc desc');

                // Thêm active class và direction
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }
                $header.addClass('active ' + currentSort.direction);

                // Sắp xếp rows
                $visibleRows.sort((a, b) => {
                    const $a = $(a);
                    const $b = $(b);
                    
                    let aValue, bValue;
                    
                    if (column === 'orderId') {
                        aValue = parseInt($a.attr('data-orderid')) || 0;
                        bValue = parseInt($b.attr('data-orderid')) || 0;
                        return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    }
                    
                    if (column === 'customerName') {
                        aValue = ($a.attr('data-customername') || '').toLowerCase();
                        bValue = ($b.attr('data-customername') || '').toLowerCase();
                        return currentSort.direction === 'asc' 
                            ? aValue.localeCompare(bValue)
                            : bValue.localeCompare(aValue);
                    }
                    
                    if (column === 'orderDate') {
                        aValue = $a.attr('data-orderdate') || '';
                        bValue = $b.attr('data-orderdate') || '';
                        return currentSort.direction === 'asc' 
                            ? new Date(aValue) - new Date(bValue)
                            : new Date(bValue) - new Date(aValue);
                    }
                    
                    if (column === 'totalAmount') {
                        aValue = parseFloat($a.attr('data-totalamount')) || 0;
                        bValue = parseFloat($b.attr('data-totalamount')) || 0;
                        return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    }

                    if (column === 'status') {
                        aValue = ($a.attr('data-status') || '').toLowerCase();
                        bValue = ($b.attr('data-status') || '').toLowerCase();
                        const statusOrder = { 'pending': 1, 'accepted': 2, 'rejected': 3 };
                        const aOrder = statusOrder[aValue] || 4;
                        const bOrder = statusOrder[bValue] || 4;
                        return currentSort.direction === 'asc' ? aOrder - bOrder : bOrder - aOrder;
                    }
                    
                    return 0;
                });

                // Reorder rows
                $.each($visibleRows, (index, row) => $('#orderTableBody').append(row));
                currentPage = 1;
                updatePagination();
            }

            // Tìm kiếm và lọc
            function filterOrders() {
                const searchTerm = $('#searchInput').val().toLowerCase();
                const statusFilter = $('#statusFilter').val().toLowerCase();
                const dateFromFilter = $('#dateFromFilter').val();
                const dateToFilter = $('#dateToFilter').val();

                $('.order-row').each(function() {
                    const $row = $(this);
                    const orderId = $row.attr('data-orderid').toString();
                    const customerName = $row.attr('data-customername') || '';
                    const status = $row.attr('data-status') || '';
                    const orderDate = $row.attr('data-orderdate') || '';

                    const matchesSearch = !searchTerm ||
                        orderId.toLowerCase().includes(searchTerm) ||
                        customerName.toLowerCase().includes(searchTerm);
                    
                    const matchesStatus = !statusFilter || status === statusFilter;
                    
                    const matchesDate = !dateFromFilter && !dateToFilter ||
                        (dateFromFilter && dateToFilter && 
                         new Date(orderDate) >= new Date(dateFromFilter) && 
                         new Date(orderDate) <= new Date(dateToFilter)) ||
                        (dateFromFilter && !dateToFilter && 
                         new Date(orderDate) >= new Date(dateFromFilter)) ||
                        (!dateFromFilter && dateToFilter && 
                         new Date(orderDate) <= new Date(dateToFilter));

                    if (matchesSearch && matchesStatus && matchesDate) {
                        $row.removeClass('hidden');
                    } else {
                        $row.addClass('hidden');
                    }
                });

                currentPage = 1;
                updatePagination();
            }

            // Cập nhật phân trang
            function updatePagination() {
                const $rows = $('.order-row:not(.hidden)');
                const totalItems = $rows.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);

                // Hiển thị thông báo nếu không có kết quả
                if (totalItems === 0) {
                    // Ẩn tất cả các dòng hiện tại
                    $('.order-row').hide();
                    
                    // Kiểm tra xem đã có thông báo "không có kết quả" chưa
                    if ($('#noResultsRow').length === 0) {
                        $('#orderTableBody').append(`
                            <tr id="noResultsRow">
                                <td colspan="7" class="text-center text-muted py-4">
                                    <i class="fas fa-search me-2"></i>
                                    Không tìm thấy đơn hàng nào phù hợp với bộ lọc hiện tại
                                </td>
                            </tr>
                        `);
                    }
                    $('#noResultsRow').show();
                    
                    // Cập nhật UI phân trang
                    const $pagination = $('#pagination');
                    $pagination.empty();
                    $pagination.append('<li class="page-item disabled"><span class="page-link">Không có dữ liệu</span></li>');
                    return;
                }

                // Ẩn thông báo "không có kết quả" nếu có
                $('#noResultsRow').hide();

                // Ẩn/hiện các dòng theo trang hiện tại
                $rows.each(function(index) {
                    const shouldShow = index >= (currentPage - 1) * itemsPerPage && 
                                    index < currentPage * itemsPerPage;
                    $(this).show().toggle(shouldShow);
                });

                // Tạo phân trang
                const $pagination = $('#pagination');
                $pagination.empty();

                // Nút Previous
                $pagination.append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `);

                // Các trang
                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 || 
                        i === totalPages || 
                        (i >= currentPage - 2 && i <= currentPage + 2)
                    ) {
                        $pagination.append(`
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" data-page="${i}">${i}</a>
                            </li>
                        `);
                    } else if (
                        i === currentPage - 3 || 
                        i === currentPage + 3
                    ) {
                        $pagination.append(`
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `);
                    }
                }

                // Nút Next
                $pagination.append(`
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `);
            }

            // Gắn sự kiện
            $('#searchInput').on('input', filterOrders);
            $('#statusFilter').on('change', filterOrders);
            $('#dateFromFilter').on('change', function() {
                const fromDate = $(this).val();
                const toDate = $('#dateToFilter').val();
                
                if (fromDate && toDate && fromDate > toDate) {
                    showToast('error', 'Ngày "từ" không thể lớn hơn ngày "đến"!');
                    $(this).addClass('is-invalid');
                    return;
                }
                
                $(this).removeClass('is-invalid');
                filterOrders();
            });
            
            $('#dateToFilter').on('change', function() {
                const fromDate = $('#dateFromFilter').val();
                const toDate = $(this).val();
                
                if (fromDate && toDate && fromDate > toDate) {
                    showToast('error', 'Ngày "đến" không thể nhỏ hơn ngày "từ"!');
                    $(this).addClass('is-invalid');
                    return;
                }
                
                $(this).removeClass('is-invalid');
                filterOrders();
            });
            $('#resetFilters').on('click', function() {
                $('#searchInput').val('');
                $('#statusFilter').val('');
                $('#dateFromFilter').val('').removeClass('is-invalid');
                $('#dateToFilter').val('').removeClass('is-invalid');
                
                // Đảm bảo tất cả các dòng được hiển thị lại
                $('.order-row').removeClass('hidden');
                
                filterOrders();
                const $btn = $(this);
                const originalText = $btn.html();
                $btn.html('<i class="fas fa-check me-1"></i>Đã đặt lại');
                $btn.removeClass('btn-outline-secondary').addClass('btn-success');
                setTimeout(() => {
                    $btn.html(originalText);
                    $btn.removeClass('btn-success').addClass('btn-outline-secondary');
                }, 1500);
            });

            // Sự kiện click cho header sortable
            $(document).on('click', 'th.sortable', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const column = $(this).data('sort');
                if (column) {
                    sortTable(column);
                }
            });

            $('#itemsPerPage').on('change', function() {
                itemsPerPage = parseInt($(this).val());
                currentPage = 1;
                updatePagination();
            });

            $(document).on('click', '.page-link', function() {
                const $link = $(this);
                const $item = $link.parent();
                
                if (!$item.hasClass('disabled') && !$item.hasClass('active')) {
                    currentPage = parseInt($link.data('page'));
                    updatePagination();
                }
            });

            // Khởi tạo ban đầu
            filterOrders();
            sortTable('orderDate');

            // Hàm thiết lập khoảng ngày nhanh
            window.setDateRange = function(range) {
                const today = new Date();
                let fromDate, toDate;
                
                switch(range) {
                    case 'today':
                        fromDate = today.toISOString().split('T')[0];
                        toDate = today.toISOString().split('T')[0];
                        break;
                    case 'yesterday':
                        const yesterday = new Date(today);
                        yesterday.setDate(today.getDate() - 1);
                        fromDate = yesterday.toISOString().split('T')[0];
                        toDate = yesterday.toISOString().split('T')[0];
                        break;
                    case 'week':
                        const weekAgo = new Date(today);
                        weekAgo.setDate(today.getDate() - 7);
                        fromDate = weekAgo.toISOString().split('T')[0];
                        toDate = today.toISOString().split('T')[0];
                        break;
                    case 'month':
                        const monthAgo = new Date(today);
                        monthAgo.setDate(today.getDate() - 30);
                        fromDate = monthAgo.toISOString().split('T')[0];
                        toDate = today.toISOString().split('T')[0];
                        break;
                    default:
                        return;
                }
                
                $('#dateFromFilter').val(fromDate).removeClass('is-invalid');
                $('#dateToFilter').val(toDate).removeClass('is-invalid');
                filterOrders();
                
                // Hiển thị thông báo
                const rangeText = range === 'today' ? 'Hôm nay' :
                                 range === 'yesterday' ? 'Hôm qua' :
                                 range === 'week' ? '7 ngày qua' : '30 ngày qua';
                showToast('success', `Đã chọn khoảng thời gian: ${rangeText}`);
            };
        });

        // Hàm hiển thị toast notification
        function showToast(type, message) {
            // Tạo toast element
            const toast = $(`
                <div class="toast-notification toast-${type}" style="
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 9999;
                    padding: 15px 20px;
                    border-radius: 5px;
                    color: white;
                    font-weight: 500;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    transform: translateX(100%);
                    transition: transform 0.3s ease;
                ">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
                    ${message}
                </div>
            `);

            // Thêm style cho toast
            if (type === 'success') {
                toast.css('background-color', '#28a745');
            } else {
                toast.css('background-color', '#dc3545');
            }

            // Thêm vào body
            $('body').append(toast);

            // Hiển thị toast
            setTimeout(() => {
                toast.css('transform', 'translateX(0)');
            }, 100);

            // Tự động ẩn sau 3 giây
            setTimeout(() => {
                toast.css('transform', 'translateX(100%)');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }

        // View order details
        function viewOrder(id) {
            $.get(`/Admin/Order/GetOrder/${id}`, function(data) {
                $('#viewOrderId').text('#' + data.orderId);
                $('#viewCustomerEmail').text(data.user?.email || 'N/A');
                $('#viewCustomerPhone').text(data.user?.phone || 'N/A');
                $('#viewShippingAddress').text(data.shippingAddress || 'N/A');
                
                // Hiển thị địa chỉ đầy đủ bao gồm xã/phường, quận/huyện, thành phố
                const fullAddress = [];
                if (data.shippingAddress) fullAddress.push(data.shippingAddress);
                if (data.ward) fullAddress.push(data.ward);
                if (data.district) fullAddress.push(data.district);
                if (data.city) fullAddress.push(data.city);
                
                if (fullAddress.length > 0) {
                    $('#viewFullAddress').text(fullAddress.join(', '));
                } else {
                    $('#viewFullAddress').text('N/A');
                }
                
                $('#viewOrderDate').text(new Date(data.orderDate).toLocaleDateString('vi-VN'));
                $('#viewPaymentMethod').text(data.paymentMethod?.methodName || 'N/A');
                $('#viewShippingMethod').text(data.shippingMethod?.methodName || 'N/A');
                
                $('#viewOrderStatus').html(`
                    <span class="status-badge status-${data.status.toLowerCase()}">
                        ${data.status?.toLowerCase() === 'pending' ? 'Chờ xử lý' :
                          data.status?.toLowerCase() === 'accepted' ? 'Đã chấp nhận' :
                          data.status?.toLowerCase() === 'rejected' ? 'Đã từ chối' : 'Chờ xử lý'}
                    </span>
                `);

                // Hiển thị chi tiết sản phẩm
                const $orderDetails = $('#viewOrderDetails');
                $orderDetails.empty();
                
                data.orderDetails.forEach(function(detail) {
                    // Lấy ảnh sản phẩm từ cấu trúc dữ liệu thực tế
                    const productImage = detail.product?.mainImage;
                    
                    const productName = detail.product?.productName || 'N/A';
                    const productSize = detail.product?.size || '';
                    
                    $orderDetails.append(`
                        <tr>
                            <td class="text-center">
                                ${productImage ? 
                                    `<img src="${productImage}" alt="${productName}" 
                                         class="rounded border" style="width: 50px; height: 50px; object-fit: cover;">` :
                                    `<div class="text-center text-muted border rounded d-flex align-items-center justify-content-center mx-auto"
                                          style="width: 50px; height: 50px; background-color: #f8f9fa;">
                                            <i class="fas fa-image"></i>
                                        </div>`
                                    }
                            </td>
                            <td>
                                <div class="fw-bold text-primary mb-1">${productName}</div>
                                ${productSize ? `<div class="text-muted small mb-1">Kích thước: ${productSize}</div>` : ''}
                            </td>
                            <td class="text-center align-middle">
                                <span class="badge bg-secondary fs-6">${detail.quantity}</span>
                            </td>
                            <td class="text-end align-middle">
                                <div class="fw-bold">${detail.unitPrice?.toLocaleString()} VNĐ</div>
                                <small class="text-muted">Đơn giá</small>
                            </td>
                            <td class="text-end align-middle">
                                <div class="fw-bold text-success">${(detail.quantity * detail.unitPrice)?.toLocaleString()} VNĐ</div>
                                <small class="text-muted">Thành tiền</small>
                            </td>
                        </tr>
                    `);
                });

                // Hiển thị tổng tiền
                $('#viewSubtotal').text((data.subtotalAmount || 0).toLocaleString() + ' VNĐ');
                $('#viewDiscount').text((data.discountAppliedAmount || 0).toLocaleString() + ' VNĐ');
                $('#viewShippingCost').text((data.shippingCostApplied || 0).toLocaleString() + ' VNĐ');
                $('#viewTotal').text((data.totalAmount || 0).toLocaleString() + ' VNĐ');
            });
        }

        // Update order status
        function updateOrderStatus(orderId, status) {
            const statusText = status === 'accepted' ? 'chấp nhận' : 'từ chối';
            const statusDisplay = status === 'accepted' ? 'Đã chấp nhận' : 'Đã từ chối';
            const statusClass = status === 'accepted' ? 'accepted' : 'rejected';

            if (confirm(`Bạn có chắc muốn ${statusText} đơn hàng #${orderId}?\n\nHành động này sẽ cập nhật trạng thái đơn hàng thành "${statusDisplay}".`)) {
                // Hiển thị loading
                const $btn = $(`button[onclick="updateOrderStatus(${orderId}, '${status}')"]`);
                const originalHtml = $btn.html();
                $btn.html('<i class="fas fa-spinner fa-spin"></i>');
                $btn.prop('disabled', true);

                $.post('/Admin/Order/UpdateStatus', {
                    orderId: orderId,
                    status: status
                }, function(response) {
                    if (response.success) {
                        // Cập nhật UI động
                        updateOrderUI(orderId, status, statusDisplay, statusClass);
                        
                        // Hiển thị thông báo thành công
                        showToast('success', `Đã ${statusText} đơn hàng #${orderId} thành công!`);
                    } else {
                        showToast('error', response.message || `Có lỗi xảy ra khi ${statusText} đơn hàng!`);
                        // Khôi phục button
                        $btn.html(originalHtml);
                        $btn.prop('disabled', false);
                    }
                }).fail(function() {
                    showToast('error', `Có lỗi xảy ra khi ${statusText} đơn hàng!`);
                    // Khôi phục button
                    $btn.html(originalHtml);
                    $btn.prop('disabled', false);
                });
            }
        }

        // Hàm cập nhật UI động
        function updateOrderUI(orderId, status, statusDisplay, statusClass) {
            const $row = $(`.order-row[data-orderid="${orderId}"]`);
            
            // Cập nhật data attribute
            $row.attr('data-status', status.toLowerCase());
            
            // Cập nhật badge trạng thái
            const $statusBadge = $row.find('.status-badge');
            $statusBadge.removeClass('status-pending status-accepted status-rejected')
                       .addClass(`status-${statusClass}`)
                       .text(statusDisplay);
            
            // Cập nhật các nút thao tác
            const $btnGroup = $row.find('.btn-group');
            $btnGroup.empty();
            
            // Luôn có nút xem chi tiết
            $btnGroup.append(`
                <button type="button" class="btn btn-sm btn-primary"
                        onclick="viewOrder(${orderId})"
                        data-bs-toggle="modal"
                        data-bs-target="#viewOrderModal"
                        title="Xem chi tiết">
                    <i class="fas fa-eye"></i>
                </button>
            `);
            
            // Thêm nút theo trạng thái mới
            if (status === 'accepted') {
                $btnGroup.append(`
                    <button type="button" class="btn btn-sm btn-success" disabled
                            title="Đã chấp nhận">
                        <i class="fas fa-check"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-secondary" disabled
                            title="Không thể từ chối đơn đã chấp nhận">
                        <i class="fas fa-times"></i>
                    </button>
                `);
            } else if (status === 'rejected') {
                $btnGroup.append(`
                    <button type="button" class="btn btn-sm btn-secondary" disabled
                            title="Không thể chấp nhận đơn đã từ chối">
                        <i class="fas fa-check"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-danger" disabled
                            title="Đã từ chối">
                        <i class="fas fa-times"></i>
                    </button>
                `);
            }
            
            // Thêm hiệu ứng animation
            $row.addClass('updated');
            setTimeout(() => {
                $row.removeClass('updated');
            }, 2000);
        }

        // Hàm hiển thị debug info
        function showDebugInfo() {
            const $debugPanel = $('#debugPanel');
            const $statusInfo = $('#debugStatusInfo');
            const $stats = $('#debugStats');
            
            if ($debugPanel.is(':visible')) {
                $debugPanel.hide();
                return;
            }

            // Thu thập thông tin trạng thái
            const statusCounts = {};
            const statusDetails = [];
            
            $('.order-row').each(function() {
                const $row = $(this);
                const orderId = $row.attr('data-orderid');
                const status = $row.attr('data-status');
                const statusText = $row.find('.status-badge').text().trim();
                
                statusCounts[status] = (statusCounts[status] || 0) + 1;
                statusDetails.push(`Đơn #${orderId}: "${status}" (${statusText})`);
            });

            // Hiển thị thông tin trạng thái
            let statusHtml = '<ul class="list-unstyled">';
            statusDetails.forEach(detail => {
                statusHtml += `<li><small>${detail}</small></li>`;
            });
            statusHtml += '</ul>';
            $statusInfo.html(statusHtml);

            // Hiển thị thống kê
            let statsHtml = '<ul class="list-unstyled">';
            Object.keys(statusCounts).forEach(status => {
                const count = statusCounts[status];
                const statusText = status === 'pending' ? 'Chờ xử lý' : 
                                 status === 'accepted' ? 'Đã chấp nhận' : 
                                 status === 'rejected' ? 'Đã từ chối' : status;
                statsHtml += `<li><strong>${statusText}:</strong> ${count} đơn hàng</li>`;
            });
            statsHtml += '</ul>';
            $stats.html(statsHtml);

            $debugPanel.show();
        }
    </script>
}