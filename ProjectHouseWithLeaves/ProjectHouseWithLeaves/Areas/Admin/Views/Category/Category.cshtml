@model IEnumerable<ProjectHouseWithLeaves.Models.Category>

@{
    ViewData["Title"] = "Quản lý danh mục";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .table > :not(caption) > * > * {
        background-color: transparent;
    }
    .table thead th {
        color: #000;
        font-weight: 600;
        cursor: pointer;
        user-select: none;
    }
    .table thead th.active {
        background-color: #198754 !important;
        color: #000;
    }
    .search-box {
        position: relative;
    }
    .search-box i {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
    .search-box input {
        padding-left: 30px;
    }
    .category-row {
        transition: all 0.3s ease;
    }
    .category-row.hidden {
        display: none;
    }
    .pagination {
        margin-bottom: 0;
    }
    .pagination .page-link {
        color: #198754;
        cursor: pointer;
    }
    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        cursor: not-allowed;
    }
    #itemsPerPage {
        width: auto;
        display: inline-block;
    }
    .sortable {
        cursor: pointer;
        position: relative;
    }
    th.sortable::after {
        content: ' \2195'; /* Up-Down Arrow */
        opacity: 0.3;
    }
    th.sortable.asc::after {
        content: ' \2191'; /* Up Arrow */
        opacity: 1;
    }
    th.sortable.desc::after {
        content: ' \2193'; /* Down Arrow */
        opacity: 1;
    }
    .bg-success {
        background-color: #28a745 !important;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .table-success {
        background-color: #d4edda;
    }
    .card {
        border-color: #28a745;
    }
    .card-header {
        background-color: #28a745;
        color: white;
    }
</style>

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-success">
        <i class="fas fa-tags me-2"></i>Quản lý Danh mục
    </h2>
    <button type="button" class="btn btn-success" onclick="showAddCategoryModal()">
        <i class="fas fa-plus me-2"></i>Thêm danh mục
    </button>
</div>

<!-- Thanh tìm kiếm và lọc -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-8">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm danh mục...">
                </div>
            </div>
            <div class="col-md-4">
                <select class="form-select" id="statusFilter">
                    <option value="">Tất cả trạng thái</option>
                    <option value="1">Hoạt động</option>
                    <option value="0">Không hoạt động</option>
                </select>
            </div>
        </div>
    </div>
</div>

<!-- Bảng danh mục -->
<div class="card">
      @* <div class="card-header bg-success">
          <h5 class="mb-0 text-white">Danh sách danh mục</h5>
      </div> *@
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-success">
                    <tr>
                        <th class="sortable" data-sort="categoryId" style="width: 80px">
                            #
                        </th>
                        <th class="sortable" data-sort="categoryName">
                            Tên danh mục
                        </th>
                        <th class="sortable" data-sort="description">
                            Mô tả
                        </th>
                        <th class="sortable" data-sort="status" style="width: 150px">
                            Trạng thái
                        </th>
                        <th style="width: 100px">Thao tác</th>
                    </tr>
                </thead>
                <tbody id="categoryTableBody">
                    @foreach (var category in Model)
                    {
                        <tr class="category-row">
                            <td>@category.CategoryId</td>
                            <td>@category.CategoryName</td>
                            <td>@category.Description</td>
                            <td>
                                @if (category.Status == 1)
                                {
                                    <span class="badge bg-success">Hoạt động</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Không hoạt động</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-success" onclick="showEditCategoryModal(@category.CategoryId)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteCategory(@category.CategoryId)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div class="d-flex align-items-center">
                    <span class="me-2">Hiển thị</span>
                    <select class="form-select form-select-sm" id="itemsPerPage">
                        <option value="5">5</option>
                        <option value="10" selected>10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <span class="ms-2">dòng mỗi trang</span>
                </div>
                <nav>
                    <ul class="pagination" id="pagination">
                        <!-- Phân trang sẽ được thêm bằng JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="categoryModalLabel">Thêm danh mục mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="categoryForm">
                    <input type="hidden" id="CategoryId" />
                    <div class="mb-3">
                        <label class="form-label">Tên danh mục</label>
                        <input type="text" class="form-control" id="CategoryName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mô tả</label>
                        <textarea class="form-control" id="Description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Trạng thái</label>
                        <select class="form-select" id="Status">
                            <option value="1">Hoạt động</option>
                            <option value="0">Không hoạt động</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnSaveCategory">
                    <i class="fas fa-save me-1"></i> Lưu
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i> Hủy
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Khởi tạo biến
            let currentSort = {
                column: 'categoryId',
                direction: 'asc'
            };
            let currentPage = 1;
            let itemsPerPage = 10;

            // Hàm cập nhật icon sort
            function updateSortIcons() {
                $('.sortable').each(function() {
                    $(this).removeClass('active asc desc');
                    const $icon = $(this).find('i');
                    $icon.removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');
                });
                const $active = $(`.sortable[data-sort="${currentSort.column}"]`);
                $active.addClass('active').addClass(currentSort.direction);
                const $icon = $active.find('i');
                $icon.removeClass('fa-sort');
                if (currentSort.direction === 'asc') {
                    $icon.addClass('fa-sort-up');
                } else {
                    $icon.addClass('fa-sort-down');
                }
            }

            // Hàm sắp xếp bảng
            function sortTable(column) {
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }
                let $rows = $('#categoryTableBody tr').not('.hidden').get();
                const colIdx = $(`th[data-sort="${column}"]`).index();
                $rows.sort(function(a, b) {
                    let aValue = $(a).find(`td:eq(${colIdx})`).text().trim();
                    let bValue = $(b).find(`td:eq(${colIdx})`).text().trim();

                    if (column === 'categoryId') {
                        aValue = parseInt(aValue, 10);
                        bValue = parseInt(bValue, 10);
                        return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    }
                    if (column === 'categoryName') {
                        // So sánh chuẩn tiếng Việt, không phân biệt hoa thường
                        return currentSort.direction === 'asc'
                            ? aValue.localeCompare(bValue, 'vi', { sensitivity: 'base' })
                            : bValue.localeCompare(aValue, 'vi', { sensitivity: 'base' });
                    }
                    if (column === 'status') {
                        aValue = aValue.toLowerCase().includes('hoạt động') ? 1 : 0;
                        bValue = bValue.toLowerCase().includes('hoạt động') ? 1 : 0;
                        return currentSort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    }
                    // Mặc định: so sánh chữ cái không phân biệt hoa thường
                    return currentSort.direction === 'asc'
                        ? aValue.localeCompare(bValue, undefined, { sensitivity: 'base' })
                        : bValue.localeCompare(aValue, undefined, { sensitivity: 'base' });
                });
                $('#categoryTableBody').append($rows);
                updateSortIcons();
                currentPage = 1;
                updatePagination();
            }

            // Tìm kiếm realtime
            function filterCategories() {
                const searchTerm = ($('#searchInput')?.val() || '').toLowerCase().trim();
                const statusFilter = $('#statusFilter')?.val();

                $('#categoryTableBody tr.category-row').each(function () {
                    const $row = $(this);
                    const name = $row.find('td:eq(1)').text();
                    const description = $row.find('td:eq(2)').text().toLowerCase();
                    
                    // Lấy trạng thái từ badge text và chuyển đổi thành số
                    const statusText = ($row.find('td:eq(3) .badge').text() || '').toLowerCase().trim();
                    const status = statusText.includes('hoạt động') ? '1' : '0';

                    // So sánh tìm kiếm
                    const matchesSearch = !searchTerm || 
                        name.includes(searchTerm) || 
                        description.includes(searchTerm);
                    
                    // So sánh trạng thái - chỉ so sánh khi có filter được chọn
                    const matchesStatus = !statusFilter || status === statusFilter;

                    // Hiển thị/ẩn dòng dựa trên cả hai điều kiện
                    $row.toggleClass('hidden', !(matchesSearch || matchesStatus));
                });

                currentPage = 1;
                updatePagination();
            }


            // Cập nhật phân trang
            function updatePagination() {
                const $rows = $('#categoryTableBody tr:not(.hidden)');
                const totalItems = $rows.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);

                // Ẩn/hiện các dòng theo trang hiện tại
                $rows.each(function(index) {
                    const shouldShow = index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage;
                    $(this).toggle(shouldShow);
                });

                // Cập nhật UI phân trang
                const $pagination = $('#pagination');
                $pagination.empty();

                // Nút Previous
                $pagination.append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `);

                // Các nút số trang
                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 || // Trang đầu
                        i === totalPages || // Trang cuối
                        (i >= currentPage - 1 && i <= currentPage + 1) // Các trang xung quanh trang hiện tại
                    ) {
                        $pagination.append(`
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" data-page="${i}">${i}</a>
                            </li>
                        `);
                    } else if (
                        i === currentPage - 2 ||
                        i === currentPage + 2
                    ) {
                        $pagination.append(`
                            <li class="page-item disabled">
                                <a class="page-link">...</a>
                            </li>
                        `);
                    }
                }

                // Nút Next
                $pagination.append(`
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `);
            }

            // Gắn sự kiện
            $('#searchInput').on('input', filterCategories);
            $('#statusFilter').on('change', filterCategories);
            $('#itemsPerPage').on('change', function() {
                itemsPerPage = parseInt($(this).val());
                currentPage = 1;
                updatePagination();
            });

            $('.sortable').off('click').on('click', function() {
                const column = $(this).data('sort');
                sortTable(column);
            });

            $(document).on('click', '.page-link', function() {
                const $link = $(this);
                const $item = $link.parent();
                
                if (!$item.hasClass('disabled') && !$item.hasClass('active')) {
                    currentPage = parseInt($link.data('page'));
                    updatePagination();
                }
            });

            // Khởi tạo ban đầu
            sortTable('categoryId');
            updatePagination();
        });

        // Các hàm xử lý CRUD
        function showAddCategoryModal() {
            $('#categoryModalLabel').text('Thêm danh mục mới');
            $('#CategoryId').val('');
            $('#CategoryName').val('');
            $('#Description').val('');
            $('#Status').val('1');
            $('#categoryModal').modal('show');
        }

        function showEditCategoryModal(categoryId) {
            $.get('/Admin/Category/GetCategories', function(response) {
                if (response.success) {
                    const category = response.data.find(c => c.categoryId === categoryId);
                    if (category) {
                        $('#categoryModalLabel').text('Chỉnh sửa danh mục');
                        $('#CategoryId').val(category.categoryId);
                        $('#CategoryName').val(category.categoryName);
                        $('#Description').val(category.description);
                        $('#Status').val(category.status);
                        $('#categoryModal').modal('show');
                    }
                }
            });
        }

        $('#btnSaveCategory').click(function() {
            const category = {
                categoryName: $('#CategoryName').val(),
                description: $('#Description').val(),
                status: parseInt($('#Status').val())
            };

            const isNew = !category.categoryId;
            const createUrl = '@Url.Action("Create", "Category", new { area = "Admin" })';
            const editUrl = '@Url.Action("Edit", "Category", new { area = "Admin" })';
            const url = isNew ? createUrl : editUrl;

            console.log(url);
            console.log(category);
            if (!category.categoryName) {
                alert('Tên danh mục không được để trống');
                return;
            }
            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(category),
                success: function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.message || 'Có lỗi xảy ra');
                    }
                },
                error: function() {
                    alert('Có lỗi xảy ra');
                }
            });
        });

        function deleteCategory(categoryId) {
            if (confirm('Bạn có chắc chắn muốn xóa danh mục này?')) {
                $.post('/Admin/Category/Delete/' + categoryId, function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.message || 'Có lỗi xảy ra');
                    }
                });
            }
        }
    </script>
}

<script>
// Đặt ngoài $(document).ready) để gọi được từ onclick
function showAddCategoryModal() {
    $('#categoryModalLabel').text('Thêm danh mục mới');
    $('#CategoryId').val('');
    $('#CategoryName').val('');
    $('#Description').val('');
    $('#Status').val('1');
    $('#categoryModal').modal('show');
}
</script> 