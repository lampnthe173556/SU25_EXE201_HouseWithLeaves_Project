@model IEnumerable<ProjectHouseWithLeaves.Dtos.UserDTO>

@{
    ViewData["Title"] = "Quản lý người dùng";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .table > :not(caption) > * > * {
        background-color: transparent;
    }
    .table thead th {
        color: #000;
        font-weight: 600;
        cursor: pointer;
        user-select: none;
    }
    .table thead th.active {
        background-color: #198754 !important;
        color: #000;
    }
    .table thead th.active i {
        opacity: 1;
    }
    .search-box {
        position: relative;
    }
    .search-box i {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
    .search-box input {
        padding-left: 30px;
    }
    .user-row {
        transition: all 0.3s ease;
    }
    .user-row.hidden {
        display: none;
    }
    .pagination {
        margin-bottom: 0;
    }
    .pagination .page-link {
        color: #198754;
        cursor: pointer;
    }
    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        cursor: not-allowed;
    }
    #itemsPerPage {
        width: auto;
        display: inline-block;
    }
    .sortable {
        cursor: pointer;
        position: relative;
    }
    th.sortable::after {
        content: ' \2195'; /* Up-Down Arrow */
        opacity: 0.3;
    }
    th.sortable.asc::after {
        content: ' \2191'; /* Up Arrow */
        opacity: 1;
    }
    th.sortable.desc::after {
        content: ' \2193'; /* Down Arrow */
        opacity: 1;
    }
    .bg-success {
        background-color: #28a745 !important;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .table-success {
        background-color: #d4edda;
    }
    .card {
        border-color: #28a745;
    }
    .card-header {
        background-color: #28a745;
        color: white;
    }
</style>

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-success">
        <i class="fas fa-users me-2"></i>Quản lý người dùng
    </h2>
</div>

<!-- Thanh tìm kiếm và lọc -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm người dùng...">
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="genderFilter">
                    <option value="">Tất cả giới tính</option>
                    <option value="MALE">Nam</option>
                    <option value="FEMALE">Nữ</option>
                    <option value="OTHER">Khác</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="statusFilter">
                    <option value="">Tất cả trạng thái</option>
                    <option value="true">Đang hoạt động</option>
                    <option value="false">Đã khóa</option>
                </select>
            </div>
        </div>
    </div>
</div>

<!-- Bảng người dùng -->
<div class="card">
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-success">
                <tr>
                    <th data-sort="fullName" class="sortable">
                        Họ tên
                    </th>
                    <th data-sort="email" class="sortable">
                        Email
                    </th>
                    <th data-sort="phoneNumber" class="sortable">
                        Số điện thoại
                    </th>
                    <th data-sort="dateOfBirth" class="sortable">
                        Ngày Sinh
                    </th>
                    <th data-sort="gender" class="sortable">
                        Giới tính
                    </th>
                    <th data-sort="status" class="sortable">
                        Trạng thái
                    </th>
                    <th data-sort="createdAt" class="sortable">
                        Ngày tạo
                    </th>
                    <th data-sort="updatedAt" class="sortable">
                        Ngày cập nhật
                    </th>
                    <th style="width: 100px">Thao tác</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                @foreach (var user in Model)
                {
                    <tr class="user-row" 
                        data-fullname="@user.FullName?.ToLower()" 
                        data-email="@user.Email?.ToLower()"
                        data-phone="@user.Phone?.ToLower()"
                        data-gender="@user.Gender"
                        data-status="@(user.IsActive == true)">
                        <td>@user.FullName</td>
                        <td>@user.Email</td>
                        <td>@(user.Phone ?? "Chưa cập nhật")</td>
                        <td>@(user.DateOfBirth.HasValue ? user.DateOfBirth.Value.ToString("dd/MM/yyyy") : "Chưa cập nhật")</td>
                        <td>@(user.Gender == "MALE" ? "Nam" : user.Gender == "FEMALE" ? "Nữ" : "Khác")</td>
                        <td>
                            <span class="badge bg-@(user.IsActive ? "success" : "warning")">
                                @(user.IsActive ? "Đang hoạt động" : "Đã khóa")
                            </span>
                        </td>
                        <td>@(user.CreatedAt.HasValue ? user.CreatedAt.Value.ToString("dd/MM/yyyy HH:mm") : "Chưa cập nhật")</td>
                        <td>@(user.UpdatedAt.HasValue ? user.UpdatedAt.Value.ToString("dd/MM/yyyy HH:mm") : "Chưa cập nhật")</td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-primary" 
                                        onclick="editUser('@user.Id')" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#editUserModal">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <form asp-action="Delete" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@user.Id" />
                                    <button type="submit" class="btn btn-sm btn-danger"
                                            onclick="return confirm('Bạn có chắc muốn xóa người dùng này?')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-between align-items-center p-3">
            <div class="d-flex align-items-center">
                <span class="me-2">Hiển thị</span>
                <select class="form-select form-select-sm" id="itemsPerPage">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
                <span class="ms-2">dòng mỗi trang</span>
            </div>
            <nav>
                <ul class="pagination" id="pagination">
                    <!-- Phân trang sẽ được thêm bằng JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Chỉnh sửa người dùng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editUserForm" asp-action="Update" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="editUserId" name="Id" />
                    <div class="mb-3">
                        <label class="form-label">Họ tên</label>
                        <input type="text" class="form-control" id="editFullName" name="FullName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="editEmail" name="Email" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Số điện thoại</label>
                        <input type="tel" class="form-control" id="editPhoneNumber" name="Phone" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Giới tính</label>
                        <select class="form-select" id="editGender" name="Gender">
                            <option value="MALE">Nam</option>
                            <option value="FEMALE">Nữ</option>
                            <option value="OTHER">Khác</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="editIsActive" name="IsActive">
                            <label class="form-check-label" for="editIsActive">
                                Đang hoạt động
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-1"></i> Lưu thay đổi
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i> Hủy
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Khởi tạo biến
            let currentSort = {
                column: 'fullName',
                direction: 'asc'
            };
            let currentPage = 1;
            let itemsPerPage = 10;

            // Hàm sắp xếp bảng
            function sortTable(column) {
                const $table = $('.table');
                const $header = $table.find(`th[data-sort="${column}"]`);
                const $rows = $('#userTableBody tr:not(.hidden)').get();

                // Cập nhật trạng thái sort
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }

                // Cập nhật giao diện header
                $table.find('th').removeClass('active asc desc');
                $header.addClass('active ' + currentSort.direction);

                // Sắp xếp các dòng
                $rows.sort(function(a, b) {
                    const aValue = $(a).find(`td:eq(${$header.index()})`).text().trim().toLowerCase();
                    const bValue = $(b).find(`td:eq(${$header.index()})`).text().trim().toLowerCase();

                    if (column === 'createdAt' || column === 'updatedAt') {
                        const aDate = aValue === 'chưa cập nhật' ? new Date(0) : new Date(aValue.split(' ')[0].split('/').reverse().join('-'));
                        const bDate = bValue === 'chưa cập nhật' ? new Date(0) : new Date(bValue.split(' ')[0].split('/').reverse().join('-'));
                        return currentSort.direction === 'asc' ? aDate - bDate : bDate - aDate;
                    }

                    if (column === 'dateOfBirth') {
                        const aDate = aValue === 'chưa cập nhật' ? new Date(0) : new Date(aValue.split('/').reverse().join('-'));
                        const bDate = bValue === 'chưa cập nhật' ? new Date(0) : new Date(bValue.split('/').reverse().join('-'));
                        return currentSort.direction === 'asc' ? aDate - bDate : bDate - aDate;
                    }

                    if (column === 'status') {
                        const aStatus = aValue.includes('đang hoạt động') ? 1 : 0;
                        const bStatus = bValue.includes('đang hoạt động') ? 1 : 0;
                        return currentSort.direction === 'asc' ? aStatus - bStatus : bStatus - aStatus;
                    }

                    if (column === 'gender') {
                        const genderOrder = { 'nam': 1, 'nữ': 2, 'khác': 3 };
                        const aOrder = genderOrder[aValue] || 4;
                        const bOrder = genderOrder[bValue] || 4;
                        return currentSort.direction === 'asc' ? aOrder - bOrder : bOrder - aOrder;
                    }

                    return currentSort.direction === 'asc'
                        ? aValue.localeCompare(bValue)
                        : bValue.localeCompare(aValue);
                });

                // Cập nhật DOM
                const $tbody = $('#userTableBody');
                $rows.forEach(row => $tbody.append(row));

                // Cập nhật phân trang
                currentPage = 1;
                updatePagination();
            }

            // Tìm kiếm và lọc realtime
            function filterUsers() {
                const searchTerm = $('#searchInput').val().toLowerCase();
                const genderFilter = $('#genderFilter').val();
                const statusFilter = $('#statusFilter').val();

                $('.user-row').each(function() {
                    const $row = $(this);
                    const fullname = $row.data('fullname') || '';
                    const email = $row.data('email') || '';
                    const phone = ($row.data('phone') || '').toString();
                    const gender = $row.data('gender') || '';
                    const status = $row.data('status');

                    const matchesSearch = !searchTerm ||
                        fullname.includes(searchTerm) ||
                        email.includes(searchTerm) ||
                        phone.includes(searchTerm);
                    const matchesGender = !genderFilter || gender === genderFilter;
                    const matchesStatus = !statusFilter || status.toString() === statusFilter;

                    if (matchesSearch && matchesGender && matchesStatus) {
                        $row.removeClass('hidden');
                    } else {
                        $row.addClass('hidden');
                    }
                });

                currentPage = 1;
                updatePagination();
            }

            // Cập nhật phân trang
            function updatePagination() {
                const $rows = $('.user-row:not(.hidden)');
                const totalItems = $rows.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);

                // Ẩn/hiện các dòng theo trang hiện tại
                $rows.each(function(index) {
                    const shouldShow = index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage;
                    $(this).toggle(shouldShow);
                });

                // Cập nhật UI phân trang
                const $pagination = $('#pagination');
                $pagination.empty();

                if (totalPages <= 1) {
                    return;
                }

                // Nút Previous
                $pagination.append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `);

                // Các nút số trang
                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 || // Trang đầu
                        i === totalPages || // Trang cuối
                        (i >= currentPage - 1 && i <= currentPage + 1) // Trang gần trang hiện tại
                    ) {
                        $pagination.append(`
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" data-page="${i}">${i}</a>
                            </li>
                        `);
                    } else if (
                        i === currentPage - 2 ||
                        i === currentPage + 2
                    ) {
                        $pagination.append(`
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `);
                    }
                }

                // Nút Next
                $pagination.append(`
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `);
            }

            // Gắn sự kiện
            $('#searchInput').on('input', filterUsers);
            $('#genderFilter, #statusFilter').on('change', filterUsers);

            $('th[data-sort]').on('click', function() {
                const column = $(this).data('sort');
                sortTable(column);
            });

            $('#itemsPerPage').on('change', function() {
                itemsPerPage = parseInt($(this).val());
                currentPage = 1;
                updatePagination();
            });

            $(document).on('click', '.page-link', function() {
                const $link = $(this);
                const $item = $link.parent();
                
                if (!$item.hasClass('disabled') && !$item.hasClass('active')) {
                    currentPage = parseInt($link.data('page'));
                    updatePagination();
                }
            });

            // Khởi tạo ban đầu
            updatePagination();
        });

        // Edit user
        function editUser(userId) {
            $.get(`/Admin/User/GetUser/${userId}`, function(data) {
                $('#editUserId').val(data.id);
                $('#editFullName').val(data.fullName);
                $('#editEmail').val(data.email);
                $('#editPhoneNumber').val(data.phone);
                $('#editGender').val(data.gender);
                $('#editIsActive').prop('checked', data.isActive);
            });
        }
    </script>
}
 