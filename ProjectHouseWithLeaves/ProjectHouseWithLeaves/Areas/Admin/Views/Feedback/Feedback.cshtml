@model IEnumerable<ProjectHouseWithLeaves.Models.Contact>

@{
    ViewData["Title"] = "Quản lý phản hồi";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .table > :not(caption) > * > * {
        background-color: transparent;
    }
    .table thead th {
        color: #000;
        font-weight: 600;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
    }
    .table thead th:hover {
        background-color: #e8f5e8 !important;
    }
    .table thead th i {
        margin-left: 5px;
        opacity: 0.3;
        transition: all 0.2s ease;
    }
    .table thead th:hover i {
        opacity: 0.7;
    }
    .table thead th.active {
        background-color: #198754 !important;
        color: white !important;
        box-shadow: inset 0 0 0 2px rgba(255,255,255,0.3);
    }
    .table thead th.active i {
        opacity: 1;
        color: white;
    }
    .table thead th.active.asc i {
        transform: rotate(180deg);
    }
    .table thead th.active.desc i {
        transform: rotate(0deg);
    }
    .search-box {
        position: relative;
    }
    .search-box i {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
    .search-box input {
        padding-left: 30px;
    }
    .feedback-row {
        transition: all 0.3s ease;
    }
    .feedback-row.hidden {
        display: none;
    }
    .pagination {
        margin-bottom: 0;
    }
    .pagination .page-link {
        color: #198754;
        cursor: pointer;
    }
    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        cursor: not-allowed;
    }
    #itemsPerPage {
        width: auto;
        display: inline-block;
    }
    .bg-success {
        background-color: #28a745 !important;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .table-success {
        background-color: #d4edda;
    }
    .card {
        border-color: #28a745;
    }
    .card-header {
        background-color: #28a745;
        color: white;
    }
    .status-badge {
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
        border-radius: 0.25rem;
    }
    .status-pending {
        background-color: #ffc107;
        color: #000;
    }
    .status-processed {
        background-color: #28a745;
        color: #fff;
    }
    .status-rejected {
        background-color: #dc3545;
        color: #fff;
    }
    .form-label {
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }
    .btn-outline-secondary:hover {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }
    .text-muted {
        color: #6c757d !important;
    }
    .py-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important;
    }
    .table thead th.sortable {
        position: relative;
        cursor: pointer;
    }
    .table thead th.sortable:hover {
        background-color: #e8f5e8 !important;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .table thead th.sortable:active {
        transform: translateY(0);
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    .btn-group .btn {
        margin-right: 2px;
        transition: all 0.2s ease;
    }
    .btn-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
    }
    .btn-group .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }
    .btn-group .btn:disabled:hover {
        transform: none;
        box-shadow: none;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover:not(:disabled) {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-danger:hover:not(:disabled) {
        background-color: #c82333;
        border-color: #bd2130;
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
        border-color: #0056b3;
    }
    .feedback-row.updated {
        background-color: #d4edda !important;
        transition: all 0.5s ease;
    }
    .status-badge {
        transition: all 0.3s ease;
    }
    .status-badge.status-processed {
        background-color: #28a745 !important;
        color: #fff !important;
    }
    .status-badge.status-rejected {
        background-color: #dc3545 !important;
        color: #fff !important;
    }
    .status-badge.status-pending {
        background-color: #ffc107 !important;
        color: #000 !important;
    }
</style>

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-success">
        <i class="fas fa-comments me-2"></i>Quản lý phản hồi
    </h2>
</div>

<!-- Thanh tìm kiếm và lọc -->
<div class="card mb-4">
    <div class="card-header bg-success text-white">
        <h6 class="mb-0">
            <i class="fas fa-filter me-2"></i>Bộ lọc và tìm kiếm
        </h6>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label fw-bold">
                    <i class="fas fa-search me-1"></i>Tìm kiếm
                </label>
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm theo email, nội dung...">
                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-bold">
                    <i class="fas fa-toggle-on me-1"></i>Trạng thái
                </label>
                <select class="form-select" id="statusFilter">
                    <option value="">Tất cả trạng thái</option>
                    <option value="CHƯA XEM">Chờ xử lý</option>
                    <option value="processed">Đã xử lý</option>
                    <option value="rejected">Đã từ chối</option>
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button type="button" class="btn btn-outline-secondary" id="resetFilters">
                    <i class="fas fa-undo me-1"></i>Đặt lại
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bảng phản hồi -->
<div class="card">
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-success">
                <tr>
                    <th class="sortable" data-sort="email" style="width: 200px" title="Click để sắp xếp theo email">
                        Email <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="description" style="width: 400px" title="Click để sắp xếp theo nội dung">
                        Nội dung <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="status" style="width: 120px" title="Click để sắp xếp theo trạng thái">
                        Trạng thái <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="sendAt" style="width: 150px" title="Click để sắp xếp theo thời gian gửi">
                        Thời gian gửi <i class="fas fa-sort"></i>
                    </th>
                    <th style="width: 150px">Thao tác</th>
                </tr>
            </thead>
            <tbody id="feedbackTableBody">
                @foreach (var feedback in Model)
                {
                    <tr class="feedback-row"
                        data-feedbackid="@feedback.ContactId"
                        data-email="@(feedback.EmailContact?.ToLower() ?? "")"
                        data-description="@(feedback.DescriptionContact?.ToLower() ?? "")"
                        data-status="@(feedback.Status?.ToLower() ?? "pending")"
                        data-sendat="@feedback.SendAt?.ToString("yyyy-MM-ddTHH:mm:ss")">
                        <td>@feedback.EmailContact</td>
                        <td>
                            <div class="text-truncate" style="max-width: 350px;" title="@feedback.DescriptionContact">
                                @feedback.DescriptionContact
                            </div>
                        </td>
                        <td>
                            <span class="status-badge status-@(feedback.Status?.ToLower() ?? "pending")">
                                @(feedback.Status == "Pending" ? "Chờ xử lý" : 
                                  feedback.Status == "Processed" ? "Đã xử lý" : 
                                  feedback.Status == "Rejected" ? "Đã từ chối" : "Chờ xử lý")
                            </span>
                        </td>
                        <td>@feedback.SendAt?.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-primary"
                                        onclick="viewFeedback(@feedback.ContactId)"
                                        data-bs-toggle="modal"
                                        data-bs-target="#viewFeedbackModal"
                                        title="Xem chi tiết">
                                    <i class="fas fa-eye"></i>
                                </button>
                                @{
                                    var feedbackStatus = feedback.Status ?? "Pending";
                                    var isPending = feedbackStatus.Equals("Pending", StringComparison.OrdinalIgnoreCase);
                                    var isProcessed = feedbackStatus.Equals("Processed", StringComparison.OrdinalIgnoreCase);
                                    var isRejected = feedbackStatus.Equals("Rejected", StringComparison.OrdinalIgnoreCase);
                                }
                                
                                @if (isPending)
                                {
                                    <button type="button" class="btn btn-sm btn-success"
                                            onclick="updateFeedbackStatus(@feedback.ContactId, 'processed')"
                                            title="Đánh dấu đã xử lý">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger"
                                            onclick="updateFeedbackStatus(@feedback.ContactId, 'rejected')"
                                            title="Từ chối phản hồi">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                                else if (isProcessed)
                                {
                                    <button type="button" class="btn btn-sm btn-success" disabled
                                            title="Đã xử lý">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-secondary" disabled
                                            title="Không thể từ chối phản hồi đã xử lý">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                                else if (isRejected)
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled
                                            title="Không thể xử lý phản hồi đã từ chối">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger" disabled
                                            title="Đã từ chối">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                                else
                                {
                                    <!-- Trạng thái không xác định - hiển thị nút cho Pending -->
                                    <button type="button" class="btn btn-sm btn-success"
                                            onclick="updateFeedbackStatus(@feedback.ContactId, 'processed')"
                                            title="Đánh dấu đã xử lý">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger"
                                            onclick="updateFeedbackStatus(@feedback.ContactId, 'rejected')"
                                            title="Từ chối phản hồi">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-between align-items-center p-3">
            <div class="d-flex align-items-center">
                <span class="me-2">Hiển thị</span>
                <select class="form-select form-select-sm" id="itemsPerPage">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
                <span class="ms-2">dòng mỗi trang</span>
            </div>
            <nav>
                <ul class="pagination" id="pagination">
                    <!-- Phân trang sẽ được thêm bằng JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- View Feedback Modal -->
<div class="modal fade" id="viewFeedbackModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Chi tiết phản hồi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label fw-bold">Email</label>
                    <p id="viewEmail" class="mb-0"></p>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Nội dung</label>
                    <p id="viewDescription" class="mb-0"></p>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Thời gian gửi</label>
                    <p id="viewSendAt" class="mb-0"></p>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Trạng thái</label>
                    <p id="viewStatus" class="mb-0"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Đóng
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Khởi tạo biến
            let currentSort = {
                column: 'sendAt',
                direction: 'desc'
            };
            let currentPage = 1;
            let itemsPerPage = 10;

            // Hàm sắp xếp bảng
            function sortTable(column) {
                const $table = $('.table');
                const $header = $table.find(`th[data-sort="${column}"]`);
                const $visibleRows = $('.feedback-row:not(.hidden)').get();

                // Xóa active class từ tất cả headers
                $table.find('th').removeClass('active asc desc');

                // Thêm active class và direction
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }
                $header.addClass('active ' + currentSort.direction);

                // Sắp xếp rows
                $visibleRows.sort((a, b) => {
                    const $a = $(a);
                    const $b = $(b);
                    
                    let aValue, bValue;
                    
                    if (column === 'email') {
                        aValue = ($a.attr('data-email') || '').toLowerCase();
                        bValue = ($b.attr('data-email') || '').toLowerCase();
                        return currentSort.direction === 'asc' 
                            ? aValue.localeCompare(bValue)
                            : bValue.localeCompare(aValue);
                    }
                    
                    if (column === 'description') {
                        aValue = ($a.attr('data-description') || '').toLowerCase();
                        bValue = ($b.attr('data-description') || '').toLowerCase();
                        return currentSort.direction === 'asc' 
                            ? aValue.localeCompare(bValue)
                            : bValue.localeCompare(aValue);
                    }
                    
                    if (column === 'sendAt') {
                        aValue = $a.attr('data-sendat') || '';
                        bValue = $b.attr('data-sendat') || '';
                        return currentSort.direction === 'asc' 
                            ? new Date(aValue) - new Date(bValue)
                            : new Date(bValue) - new Date(aValue);
                    }

                    if (column === 'status') {
                        aValue = ($a.attr('data-status') || '').toLowerCase();
                        bValue = ($b.attr('data-status') || '').toLowerCase();
                        const statusOrder = { 'pending': 1, 'processed': 2, 'rejected': 3 };
                        const aOrder = statusOrder[aValue] || 4;
                        const bOrder = statusOrder[bValue] || 4;
                        return currentSort.direction === 'asc' ? aOrder - bOrder : bOrder - aOrder;
                    }
                    
                    return 0;
                });

                // Reorder rows
                $.each($visibleRows, (index, row) => $('#feedbackTableBody').append(row));
                currentPage = 1;
                updatePagination();
            }

            // Tìm kiếm và lọc
            function filterFeedbacks() {
                const searchTerm = $('#searchInput').val().toLowerCase();
                const statusFilter = $('#statusFilter').val().toLowerCase();

                $('.feedback-row').each(function() {
                    const $row = $(this);
                    const email = $row.attr('data-email') || '';
                    const description = $row.attr('data-description') || '';
                    const status = $row.attr('data-status') || '';

                    const matchesSearch = !searchTerm ||
                        email.includes(searchTerm) ||
                        description.includes(searchTerm);
                    
                    const matchesStatus = !statusFilter || status === statusFilter;

                    if (matchesSearch && matchesStatus) {
                        $row.removeClass('hidden');
                    } else {
                        $row.addClass('hidden');
                    }
                });

                currentPage = 1;
                updatePagination();
            }

            // Cập nhật phân trang
            function updatePagination() {
                const $rows = $('.feedback-row:not(.hidden)');
                const totalItems = $rows.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);

                // Hiển thị thông báo nếu không có kết quả
                if (totalItems === 0) {
                    // Ẩn tất cả các dòng hiện tại
                    $('.feedback-row').hide();
                    
                    // Kiểm tra xem đã có thông báo "không có kết quả" chưa
                    if ($('#noResultsRow').length === 0) {
                        $('#feedbackTableBody').append(`
                            <tr id="noResultsRow">
                                <td colspan="5" class="text-center text-muted py-4">
                                    <i class="fas fa-search me-2"></i>
                                    Không tìm thấy phản hồi nào phù hợp với bộ lọc hiện tại
                                </td>
                            </tr>
                        `);
                    }
                    $('#noResultsRow').show();
                    
                    // Cập nhật UI phân trang
                    const $pagination = $('#pagination');
                    $pagination.empty();
                    $pagination.append('<li class="page-item disabled"><span class="page-link">Không có dữ liệu</span></li>');
                    return;
                }

                // Ẩn thông báo "không có kết quả" nếu có
                $('#noResultsRow').hide();

                // Ẩn/hiện các dòng theo trang hiện tại
                $rows.each(function(index) {
                    const shouldShow = index >= (currentPage - 1) * itemsPerPage && 
                                    index < currentPage * itemsPerPage;
                    $(this).show().toggle(shouldShow);
                });

                // Tạo phân trang
                const $pagination = $('#pagination');
                $pagination.empty();

                // Nút Previous
                $pagination.append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `);

                // Các trang
                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 || 
                        i === totalPages || 
                        (i >= currentPage - 2 && i <= currentPage + 2)
                    ) {
                        $pagination.append(`
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" data-page="${i}">${i}</a>
                            </li>
                        `);
                    } else if (
                        i === currentPage - 3 || 
                        i === currentPage + 3
                    ) {
                        $pagination.append(`
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `);
                    }
                }

                // Nút Next
                $pagination.append(`
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `);
            }

            // Gắn sự kiện
            $('#searchInput').on('input', filterFeedbacks);
            $('#statusFilter').on('change', filterFeedbacks);
            $('#resetFilters').on('click', function() {
                $('#searchInput').val('');
                $('#statusFilter').val('');
                
                // Đảm bảo tất cả các dòng được hiển thị lại
                $('.feedback-row').removeClass('hidden');
                
                filterFeedbacks();
                const $btn = $(this);
                const originalText = $btn.html();
                $btn.html('<i class="fas fa-check me-1"></i>Đã đặt lại');
                $btn.removeClass('btn-outline-secondary').addClass('btn-success');
                setTimeout(() => {
                    $btn.html(originalText);
                    $btn.removeClass('btn-success').addClass('btn-outline-secondary');
                }, 1500);
            });

            // Sự kiện click cho header sortable
            $(document).on('click', 'th.sortable', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const column = $(this).data('sort');
                if (column) {
                    sortTable(column);
                }
            });

            $('#itemsPerPage').on('change', function() {
                itemsPerPage = parseInt($(this).val());
                currentPage = 1;
                updatePagination();
            });

            $(document).on('click', '.page-link', function() {
                const $link = $(this);
                const $item = $link.parent();
                
                if (!$item.hasClass('disabled') && !$item.hasClass('active')) {
                    currentPage = parseInt($link.data('page'));
                    updatePagination();
                }
            });

            // Khởi tạo ban đầu
            filterFeedbacks();
            sortTable('sendAt');
        });

        // View feedback details
        function viewFeedback(id) {
            $.get(`/Admin/Feedback/GetFeedback/${id}`, function(data) {
                $('#viewEmail').text(data.emailContact);
                $('#viewDescription').text(data.descriptionContact);
                $('#viewSendAt').text(new Date(data.sendAt).toLocaleString('vi-VN'));
                $('#viewStatus').html(`
                    <span class="status-badge status-${data.status.toLowerCase()}">
                        ${data.status === 'Pending' ? 'Chờ xử lý' : 
                          data.status === 'Processed' ? 'Đã xử lý' : 
                          data.status === 'Rejected' ? 'Đã từ chối' : 'Chờ xử lý'}
                    </span>
                `);
            });
        }

        // Update feedback status
        function updateFeedbackStatus(feedbackId, status) {
            const statusText = status === 'processed' ? 'đánh dấu đã xử lý' : 'từ chối';
            const statusDisplay = status === 'processed' ? 'Đã xử lý' : 'Đã từ chối';
            const statusClass = status === 'processed' ? 'processed' : 'rejected';

            if (confirm(`Bạn có chắc muốn ${statusText} phản hồi #${feedbackId}?\n\nHành động này sẽ cập nhật trạng thái phản hồi thành "${statusDisplay}".`)) {
                // Hiển thị loading
                const $btn = $(`button[onclick="updateFeedbackStatus(${feedbackId}, '${status}')"]`);
                const originalHtml = $btn.html();
                $btn.html('<i class="fas fa-spinner fa-spin"></i>');
                $btn.prop('disabled', true);

                $.ajax({
                    url: '/Admin/Feedback/UpdateStatus',
                    type: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    data: {
                        id: feedbackId,
                        status: status.charAt(0).toUpperCase() + status.slice(1) // Capitalize first letter
                    },
                    success: function(response) {
                        if (response.success) {
                            // Cập nhật UI động
                            updateFeedbackUI(feedbackId, status, statusDisplay, statusClass);
                            
                            // Hiển thị thông báo thành công
                            showToast('success', `Đã ${statusText} phản hồi #${feedbackId} thành công!`);
                        } else {
                            showToast('error', response.message || `Có lỗi xảy ra khi ${statusText} phản hồi!`);
                            // Khôi phục button
                            $btn.html(originalHtml);
                            $btn.prop('disabled', false);
                        }
                    },
                    error: function() {
                        showToast('error', `Có lỗi xảy ra khi ${statusText} phản hồi!`);
                        // Khôi phục button
                        $btn.html(originalHtml);
                        $btn.prop('disabled', false);
                    }
                });
            }
        }

        // Hàm cập nhật UI động
        function updateFeedbackUI(feedbackId, status, statusDisplay, statusClass) {
            const $row = $(`.feedback-row[data-feedbackid="${feedbackId}"]`);
            
            // Cập nhật data attribute
            $row.attr('data-status', status.toLowerCase());
            
            // Cập nhật badge trạng thái
            const $statusBadge = $row.find('.status-badge');
            $statusBadge.removeClass('status-pending status-processed status-rejected')
                       .addClass(`status-${statusClass}`)
                       .text(statusDisplay);
            
            // Cập nhật các nút thao tác
            const $btnGroup = $row.find('.btn-group');
            $btnGroup.empty();
            
            // Luôn có nút xem chi tiết
            $btnGroup.append(`
                <button type="button" class="btn btn-sm btn-primary"
                        onclick="viewFeedback(${feedbackId})"
                        data-bs-toggle="modal"
                        data-bs-target="#viewFeedbackModal"
                        title="Xem chi tiết">
                    <i class="fas fa-eye"></i>
                </button>
            `);
            
            // Thêm nút theo trạng thái mới
            if (status === 'processed') {
                $btnGroup.append(`
                    <button type="button" class="btn btn-sm btn-success" disabled
                            title="Đã xử lý">
                        <i class="fas fa-check"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-secondary" disabled
                            title="Không thể từ chối phản hồi đã xử lý">
                        <i class="fas fa-times"></i>
                    </button>
                `);
            } else if (status === 'rejected') {
                $btnGroup.append(`
                    <button type="button" class="btn btn-sm btn-secondary" disabled
                            title="Không thể xử lý phản hồi đã từ chối">
                        <i class="fas fa-check"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-danger" disabled
                            title="Đã từ chối">
                        <i class="fas fa-times"></i>
                    </button>
                `);
            }
            
            // Thêm hiệu ứng animation
            $row.addClass('updated');
            setTimeout(() => {
                $row.removeClass('updated');
            }, 2000);
        }

        // Hàm hiển thị toast notification
        function showToast(type, message) {
            // Tạo toast element
            const toast = $(`
                <div class="toast-notification toast-${type}" style="
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 9999;
                    padding: 15px 20px;
                    border-radius: 5px;
                    color: white;
                    font-weight: 500;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    transform: translateX(100%);
                    transition: transform 0.3s ease;
                ">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
                    ${message}
                </div>
            `);

            // Thêm style cho toast
            if (type === 'success') {
                toast.css('background-color', '#28a745');
            } else {
                toast.css('background-color', '#dc3545');
            }

            // Thêm vào body
            $('body').append(toast);

            // Hiển thị toast
            setTimeout(() => {
                toast.css('transform', 'translateX(0)');
            }, 100);

            // Tự động ẩn sau 3 giây
            setTimeout(() => {
                toast.css('transform', 'translateX(100%)');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }
    </script>
}

