@model IEnumerable<ProjectHouseWithLeaves.Models.Contact>

@{
    ViewData["Title"] = "Quản lý phản hồi";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .table > :not(caption) > * > * {
        background-color: transparent;
    }
    .table thead th {
        color: #000;
        font-weight: 600;
        cursor: pointer;
        user-select: none;
    }
    .table thead th i {
        margin-left: 5px;
        opacity: 0.3;
    }
    .table thead th.active {
        background-color: #198754 !important;
        color: #000;
    }
    .table thead th.active i {
        opacity: 1;
    }
    .search-box {
        position: relative;
    }
    .search-box i {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }
    .search-box input {
        padding-left: 30px;
    }
    .feedback-row {
        transition: all 0.3s ease;
    }
    .feedback-row.hidden {
        display: none;
    }
    .pagination {
        margin-bottom: 0;
    }
    .pagination .page-link {
        color: #198754;
        cursor: pointer;
    }
    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        cursor: not-allowed;
    }
    #itemsPerPage {
        width: auto;
        display: inline-block;
    }
    .sortable {
        cursor: pointer;
        position: relative;
    }
    th.sortable::after {
        content: ' \2195'; /* Up-Down Arrow */
        opacity: 0.3;
    }
    th.sortable.asc::after {
        content: ' \2191'; /* Up Arrow */
        opacity: 1;
    }
    th.sortable.desc::after {
        content: ' \2193'; /* Down Arrow */
        opacity: 1;
    }
    .bg-success {
        background-color: #28a745 !important;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }
    .table-success {
        background-color: #d4edda;
    }
    .card {
        border-color: #28a745;
    }
    .card-header {
        background-color: #28a745;
        color: white;
    }
    .status-badge {
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
        border-radius: 0.25rem;
    }
    .status-pending {
        background-color: #ffc107;
        color: #000;
    }
    .status-processed {
        background-color: #28a745;
        color: #fff;
    }
    .status-rejected {
        background-color: #dc3545;
        color: #fff;
    }
</style>

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-success">
        <i class="fas fa-comments me-2"></i>Quản lý phản hồi
    </h2>
</div>

<!-- Thanh tìm kiếm và lọc -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm theo email, nội dung...">
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="statusFilter">
                    <option value="">Tất cả trạng thái</option>
                    <option value="Pending">Chờ xử lý</option>
                    <option value="Processed">Đã xử lý</option>
                    <option value="Rejected">Đã từ chối</option>
                </select>
            </div>
        </div>
    </div>
</div>

<!-- Bảng phản hồi -->
<div class="card">
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-success">
                <tr>
                    <th class="sortable" data-sort="email">Email</th>
                    <th class="sortable" data-sort="description">Nội dung</th>
                    <th class="sortable" data-sort="status">Trạng thái</th>
                    <th class="sortable" data-sort="sendAt">Thời gian gửi</th>
                    <th style="width: 120px">Thao tác</th>
                </tr>
            </thead>
            <tbody id="feedbackTableBody">
                @foreach (var feedback in Model)
                {
                    <tr class="feedback-row"
                        data-email="@feedback.EmailContact?.ToLower()"
                        data-description="@feedback.DescriptionContact?.ToLower()"
                        data-status="@feedback.Status"
                        data-sendat="@feedback.SendAt?.ToString("yyyy-MM-ddTHH:mm:ss")">
                        <td>@feedback.EmailContact</td>
                        <td>
                            <div class="text-truncate" style="max-width: 300px;" title="@feedback.DescriptionContact">
                                @feedback.DescriptionContact
                            </div>
                        </td>
                        <td>
                            <span class="status-badge status-@feedback.Status.ToLower()">
                                @(feedback.Status == "Pending" ? "Chờ xử lý" : 
                                  feedback.Status == "Processed" ? "Đã xử lý" : "Đã từ chối")
                            </span>
                        </td>
                        <td>@feedback.SendAt?.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-primary"
                                        onclick="viewFeedback(@feedback.ContactId)"
                                        data-bs-toggle="modal"
                                        data-bs-target="#viewFeedbackModal">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <form asp-action="UpdateStatus" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@feedback.ContactId" />
                                    <input type="hidden" name="status" value="Processed" />
                                    <button type="submit" class="btn btn-sm btn-success"
                                            onclick="return confirm('Bạn có chắc muốn đánh dấu phản hồi này là đã xử lý?')">
                                        <i class="fas fa-check"></i>
                                    </button>
                                </form>
                                <form asp-action="UpdateStatus" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@feedback.ContactId" />
                                    <input type="hidden" name="status" value="Rejected" />
                                    <button type="submit" class="btn btn-sm btn-danger"
                                            onclick="return confirm('Bạn có chắc muốn từ chối phản hồi này?')">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-between align-items-center p-3">
            <div class="d-flex align-items-center">
                <span class="me-2">Hiển thị</span>
                <select class="form-select form-select-sm" id="itemsPerPage">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
                <span class="ms-2">dòng mỗi trang</span>
            </div>
            <nav>
                <ul class="pagination" id="pagination">
                    <!-- Phân trang sẽ được thêm bằng JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- View Feedback Modal -->
<div class="modal fade" id="viewFeedbackModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Chi tiết phản hồi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label fw-bold">Email</label>
                    <p id="viewEmail" class="mb-0"></p>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Nội dung</label>
                    <p id="viewDescription" class="mb-0"></p>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Thời gian gửi</label>
                    <p id="viewSendAt" class="mb-0"></p>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-bold">Trạng thái</label>
                    <p id="viewStatus" class="mb-0"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Đóng
                </button>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        $(document).ready(function() {
            // Khởi tạo biến
            let currentSort = {
                column: 'sendAt',
                direction: 'desc'
            };
            let currentPage = 1;
            let itemsPerPage = 10;

            // Hàm sắp xếp bảng
            function sortTable(column) {
                const $table = $('.table');
                const $header = $table.find(`th[data-sort="${column}"]`);
                const $rows = $('#feedbackTableBody tr').get();

                // Xóa active class từ tất cả headers
                $table.find('th').removeClass('active asc desc');

                // Thêm active class và direction
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }
                $header.addClass('active ' + currentSort.direction);

                // Sắp xếp rows
                $rows.sort((a, b) => {
                    const aValue = $(a).data(column)?.toString().toLowerCase() || '';
                    const bValue = $(b).data(column)?.toString().toLowerCase() || '';
                    
                    if (column === 'sendAt') {
                        return currentSort.direction === 'asc' 
                            ? new Date(aValue) - new Date(bValue)
                            : new Date(bValue) - new Date(aValue);
                    }
                    
                    return currentSort.direction === 'asc'
                        ? aValue.localeCompare(bValue)
                        : bValue.localeCompare(aValue);
                });

                // Reorder rows
                $.each($rows, (index, row) => $('#feedbackTableBody').append(row));
                updatePagination();
            }

            // Tìm kiếm và lọc
            function filterFeedbacks() {
                const searchTerm = $('#searchInput').val().toLowerCase();
                const statusFilter = $('#statusFilter').val().toLowerCase();

                $('.feedback-row').each(function() {
                    const $row = $(this);
                    const email = $row.data('email');
                    const description = $row.data('description');
                    const status = $row.data('status').toLowerCase();

                    const matchesSearch = !searchTerm ||
                        email.includes(searchTerm) ||
                        description.includes(searchTerm);
                    
                    const matchesStatus = !statusFilter || status === statusFilter;

                    if (matchesSearch && matchesStatus) {
                        $row.removeClass('hidden');
                    } else {
                        $row.addClass('hidden');
                    }
                });

                currentPage = 1;
                updatePagination();
            }

            // Cập nhật phân trang
            function updatePagination() {
                const $rows = $('.feedback-row:not(.hidden)');
                const totalItems = $rows.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);

                // Ẩn/hiện các dòng theo trang hiện tại
                $rows.each(function(index) {
                    const shouldShow = index >= (currentPage - 1) * itemsPerPage && 
                                    index < currentPage * itemsPerPage;
                    $(this).toggle(shouldShow);
                });

                // Tạo phân trang
                const $pagination = $('#pagination');
                $pagination.empty();

                // Nút Previous
                $pagination.append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `);

                // Các trang
                for (let i = 1; i <= totalPages; i++) {
                    if (
                        i === 1 || 
                        i === totalPages || 
                        (i >= currentPage - 2 && i <= currentPage + 2)
                    ) {
                        $pagination.append(`
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" data-page="${i}">${i}</a>
                            </li>
                        `);
                    } else if (
                        i === currentPage - 3 || 
                        i === currentPage + 3
                    ) {
                        $pagination.append(`
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `);
                    }
                }

                // Nút Next
                $pagination.append(`
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" data-page="${currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `);
            }

            // Gắn sự kiện
            $('#searchInput').on('input', filterFeedbacks);
            $('#statusFilter').on('change', filterFeedbacks);

            $('th[data-sort]').on('click', function() {
                const column = $(this).data('sort');
                sortTable(column);
            });

            $('#itemsPerPage').on('change', function() {
                itemsPerPage = parseInt($(this).val());
                currentPage = 1;
                updatePagination();
            });

            $(document).on('click', '.page-link', function() {
                const $link = $(this);
                const $item = $link.parent();
                
                if (!$item.hasClass('disabled') && !$item.hasClass('active')) {
                    currentPage = parseInt($link.data('page'));
                    updatePagination();
                }
            });

            // Khởi tạo ban đầu
            sortTable('sendAt');
            updatePagination();
        });

        // View feedback
        function viewFeedback(id) {
            $.get(`/Admin/Feedback/GetFeedback/${id}`, function(data) {
                $('#viewEmail').text(data.emailContact);
                $('#viewDescription').text(data.descriptionContact);
                $('#viewSendAt').text(new Date(data.sendAt).toLocaleString('vi-VN'));
                $('#viewStatus').html(`
                    <span class="status-badge status-${data.status.toLowerCase()}">
                        ${data.status === 'Pending' ? 'Chờ xử lý' : 
                          data.status === 'Processed' ? 'Đã xử lý' : 'Đã từ chối'}
                    </span>
                `);
            });
        }
    </script>
}

